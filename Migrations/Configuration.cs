namespace Project.Migrations
{
    using System;
    using System.Data.Entity;
    using Project.Models;
    using System.Collections.Generic;
    using System.Data.Entity.Migrations;
    using System.Linq;

    internal sealed class Configuration : DbMigrationsConfiguration<Project.Models.projectContext>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = false;
            ContextKey = "Project.Models.projectContext";
        }

        protected override void Seed(Project.Models.projectContext context)
        {
            //  This method will be called after migrating to the latest version.

            //  You can use the DbSet<T>.AddOrUpdate() helper extension method 
            //  to avoid creating duplicate seed data.


            var vulnerability = new List<vulnerability>
            {
                new vulnerability(){vulID = 1, Name = "James", Date = "21/11/2020", Topic = "Sql Injection", Details = "SQL Injection (SQLi) is a type of an injection attack that makes it possible to execute malicious SQL statements. These statements control a database server behind a web application. Attackers can use SQL Injection vulnerabilities to bypass application security measures. They can go around authentication and authorization of a web page or web application and retrieve the content of the entire SQL database. They can also use SQL Injection to add, modify, and delete records in the database."},
                new vulnerability(){vulID = 2, Name = "Piyush", Date = "21/11/2020", Topic = "Cross-site-Scripting", Details = "Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass access controls such as the same-origin policy."},
                new vulnerability(){vulID = 3, Name = "Dylan", Date = "19/11/2020", Topic = "Cross-Site Request Forgery", Details = "Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker's choosing. If the victim is a normal user, a successful CSRF attack can force the user to perform state changing requests like transferring funds, changing their email address, and so forth. If the victim is an administrative account, CSRF can compromise the entire web application."},
                new vulnerability(){vulID = 4, Name = "Nathan", Date = "18/11/2020", Topic = "Broken Access control", Details = "Access control, sometimes called authorization, is how a web application grants access to content and functions to some users and not others. These checks are performed after authentication, and govern what ‘authorized’ users are allowed to do. Access control sounds like a simple problem but is insidiously difficult to implement correctly. A web application’s access control model is closely tied to the content and functions that the site provides. In addition, the users may fall into a number of groups or roles with different abilities or privileges."},
                new vulnerability(){vulID = 4, Name = "Alex", Date = "17/11/2020", Topic = "Sensitive data exposure", Details = "Sensitive Data Exposure occurs when an application does not adequately protect sensitive information. The data can vary and anything from passwords, session tokens, credit card data to private health data and more can be exposed."}
            };

            vulnerability.ForEach(v => context.vulnerabilities.AddOrUpdate(v));
            context.SaveChanges();


            var secure = new List<secure>
            {
                new secure(){secID = 1, Name = "Alex", Date = "21/11/2020", Topic = "Secure Coding", Details = "Through the use of Veracode eLearning, developers have access to web-based training for secure development that also provides them with certification and CPE credits. With Veracode secure development eLearning, enterprises are given the ability to measure and track their developers' progress, helping to comply with ISO regulations and industry standards such as SANS Application Security Procurement Contract Language. With eLearning, developers can learn secure coding for languages such as ASP.NET, J2EE, and C/C++, as well as study the fundamentals of secure development. More information on Veracode’s eLearning capabilities, as well as a full listing of the curriculum can be found here."},
                new secure(){secID = 2, Name = "Sam", Date = "20/11/2020", Topic = "SDLC Security", Details = "In the past, SDLC security was achieved with time-consuming tools like manual penetration testing and dynamic analysis. While effective, these solutions for secure web application development hindered processes and slowed timelines, causing unacceptable delays in getting applications into production. Consequently, development did not always employ testing as often as they should have. But as web applications have become the primary point of attack for cyber criminals, failure to adequately test for SDLC security may result in data breaches that can be devastating for both software vendors and their customers."},
                new secure(){secID = 3, Name = "Sam", Date = "19/11/2020", Topic = "Ruby Security", Details = "Ruby is an object-oriented programming language. Ruby was first developed in the mid-1990s by Yukihiro Matz Matsumoto. Ruby supports multiple programming paradigms, including functional, object oriented, imperative and reflective. Ruby also has a dynamic type system and automatic memory management. Ruby on Rails is an open source web application framework for the Ruby programming language. Ruby is known for Convention over Configuration, Don't repeat yourself and Restful Web Services."},
                new secure(){secID = 4, Name = "Sim", Date = "18/11/2020", Topic = "JavaScript Security", Details = "JavaScript is a high-level, interpreted programming language that has been widely used since its release in 1995. JavaScript is currently the world’s 11th most popular programming language. JavaScript is commonly used in dynamic web pages to provide extended functionalities such as form submission/validation, interactivity, animations, user activity tracking and more. In order to do this, a JavaScript function is embedded in an HTML page, where it can interact with that page’s Document Object Model (DOM) to perform specific functions. JavaScript is not to be confused with the Java programming language – the languages are both object-oriented, have C-like syntaxes and share several names and naming conventions, but are otherwise not related. In addition to its use in web browser applications, Javascript is increasingly used in mobile applications, via cross-platform development tools like Titanium and PhoneGap, and in server-side code via frameworks like Node.js."},
                new secure(){secID = 5, Name = "Jake", Date = "18/11/2020", Topic = "Android Security: System-Level Security Features", Details = "The Linux kernel provides Android with a set of security measures. It grants the operating system a user-based permissions model, process isolation, a secure mechanism for IPC, and the ability to remove any unnecessary or potentially insecure parts of the kernel. It further works to prevent multiple system users from accessing each other’s resources and exhausting them."},
            };

            secure.ForEach(b => context.secures.AddOrUpdate(b));
            context.SaveChanges();

            var research = new List<research>
            {
                new research(){reID = 1, Name = "Chris Wysopal", Date = "21/11/2020", Topic = "Website Vulnerability Research and Disclosure", Details = "Vulnerability disclosure is in the spotlight again. First it was Tavis Ormandy disclosing a vulnerability in Microsoft Windows before Microsoft had a fix available. Now a group called Goatse Security has disclosed a vulnerability in an AT&T website that affects Apple iPad 3G owners. The Wall Street Journal reports on the repercussions against vulnerability researchers in “Computer Experts Face Backlash”. The AT&T website vulnerability is part of a growing new trend for vulnerability disclosures. As software and services move from traditional installed software to SaaS and into the cloud, more vulnerabilities are only going to exist in code running on one organization’s web server. This makes the basis for website vulnerability disclosures as beneficial somewhat different from disclosures for software that is installed on many customer devices. The first issue with vulnerabilities in code running on a website is, to do the research in the first place, the researcher needs to interact with computers that they don’t own. Traditional vulnerability research occurs on the researcher’s equipment or on equipment they have permission to use. Website research has a risk of crossing the line into unauthorized access or exceeding authorized access as defined by the CFAA (Computer Fraud and Abuse Act). What constitutes exceeding access on a public website is a bit of a gray area. On one hand, sending a large buffer to a web application that causes it to crash and execute the code of your choosing seems like exceeding authorized access. No one would ever think the application was designed to do that and clearly executing your own program is very different than interacting with a web page. But what about a web site which was designed to display the email address associated with an ID when the user enters an ID? Is it exceeding authorized access to put in a random ID and get the email address associated with it back? The website is working as its designers intended. The latter case is exactly the vulnerability (now fixed) in the AT&T website that affected iPad 3G users. Anyone who registered on the AT&T website entered their iPad’s ICC-ID and an email address. After they had registered they could return and enter just the ICC-ID and the web page would display their email address. Researchers from Goatse Security noticed this and tried entering random ICC-ID numbers into the website and discovered for valid ICC-IDs they would get the owner’s email in response. At this point Goatse Security had enough to demonstrate the vulnerability and report it to AT&T. But as is often the case when a tiny organization with little track record is reporting an issue to a huge multinational company, they gathered enough information to make the story newsworthy and got a 3rd party organization to contact the company. In fact, they harvested 114,067 email addresses. So a wrinkle to this “gray area” of exceeding authorized access may how much information is gathered. If AT&T prosecutes, as they have stated they will, we will get to find out whether this behavior exceeded authorized access in the eyes of the court. There is clearly a benefit to Goatse Security’s work. AT&T had the opportunity to fix their website before any information about the vulnerability was made public. A vulnerability that disclosed information that could have been used by criminals to target iPad owners, both over email and over the GSM network, has been remediated. Furthermore, the iPad owners have been notified and can take corrective action, such as being more vigilant to iPad targeted attacks over email or changing their ICC-ID with a new SIM card. It is hard to see any downside to their actions. They never disclosed the information they obtained to prove the vulnerability to a 3rd party and they say they have destroyed it. We need a way for researchers that discover vulnerabilities in web applications and report them without being prosecuted. As long as the owners of the web site have the opportunity to make corrections to address the vulnerability before disclosure, this will benefit users in the long run. The challenge is in determining what is an attack and what is research? When does research become exceeding unauthorized access under CFAA? These questions don’t exist for research into vulnerabilities in traditional software that is installed on a machine the researcher owns. As sensitive information moves from local machines and servers to databases and files on the internet, this information is mediated by potentially vulnerable web applications. If good faith and responsible research can’t continue to follow software as it moves from desktops and servers to the cloud then data security overall will suffer. But we shouldn’t kid ourselves and think that research alone can make an application more secure. It can point out bugs here and there, but can never make an application secure. To do that, web app developers need to test their software for security vulnerabilities before they deploy the software to the internet. A vulnerability report from a researcher is a wake-up call that security testing was inadequate. Organizations need to demonstrate to their customers that they have conducted adequate testing before they deploy their applications and certainly before they attract the attention of researchers. That is the real solution for security on the web. Unfortunately we are still in a phase where researchers need to keep demonstrating the need for more security testing."},
                new research(){reID = 2, Name = "Dylan", Date = "20/11/2020", Topic = "Research and design on Web application vulnerability scanning service", Details = "Web application has got a remarkable change in the past few years, many new technologies are reshaping the pattern of Web applications. Since many manufacturers' promotion on HTML5 technology, more and more websites are using HTML5 gradually. The new technology provides users with a variety of Internet applications, but introduces new security problems at the same time. Currently, most Web application scanners can not detect the security problems with HTML5 features, which make HTML5 security issues become blind spots in security vulnerability scanning process. The paper focuses on a research among the existing Web application scanners firstly. Then we selected W3af(Web Application Attack and Audit Framework) as a basic platform for transformation, and by customizing scanning modules and scripts, we designed a Web application security scanning service. The practical scan results show that it can not only detect the Clickjacking vulnerabilities brought by HTML5, but also provide efficient Web application security scanning and evaluation services for the websites."},
                new research(){reID = 3, Name = "Sam", Date = "19/11/2020", Topic = "Web Security", Details = "It seems not a week goes by without news of a major corporation or public institution suffering a web security attack. These high profile episodes show how even organizations with ample resources struggle to fully protect their web properties and the data that lies behind them. What makes web security a tough challenge for these organizations—and even more so for smaller organizations with fewer resources at their disposal—is that the web security threat environment is constantly evolving."},
            };

            research.ForEach(c => context.researches.AddOrUpdate(c));
            context.SaveChanges();


            var resolution = new List<resolution>
            {
                new resolution(){resID = 1, Name = "Nathan", Date = "21/11/2020", Topic = "What is this error java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException?", Details = "//Please add a solution// "},
                new resolution(){resID = 2, Name = "Dylan", Date = "20/11/2020", Topic = "What is this error java.lang.UnsupportedClassVersionError: test_hello_world :Unsupported major.minor version 51.0 at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClassCond(Unknown Source)?", Details = "//Please add a solution//"},
                new resolution(){resID = 3, Name = "Sam", Date = "19/11/2020", Topic = "My website is prone to Sql injections. How do i improve its security?", Details = "//Please add a solution//"},
            };

            resolution.ForEach(d => context.resolutions.AddOrUpdate(d));
            context.SaveChanges();





        }
    }
}
